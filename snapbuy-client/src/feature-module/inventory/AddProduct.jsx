import { useState, useEffect } from "react";
import { Link, useNavigate } from "react-router-dom";
import { message } from "antd";
import { all_routes } from "../../routes/all_routes";
import { createProduct } from "../../services/ProductService";
import { getAllCategories } from "../../services/CategoryService";
import CommonSelect from "../../components/select/common-select";
import DeleteModal from "../../components/delete-modal";
import RefreshIcon from "../../components/tooltip-content/refresh";
import CollapesIcon from "../../components/tooltip-content/collapes";

const AddProduct = () => {
  const route = all_routes;
  const navigate = useNavigate();

  const [product, setProduct] = useState({
    productCode: "",
    productName: "",
    description: "",
    unit: "",
    supplierName: "",
    dimensions: "",
  });

  const [categories, setCategories] = useState([]);
  const [subCategories, setSubCategories] = useState([]);
  const [selectedCategory, setSelectedCategory] = useState(null);
  const [selectedSubCategory, setSelectedSubCategory] = useState(null);

  const [errors, setErrors] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isImageVisible, setIsImageVisible] = useState(true);

  const handleRemoveProduct = () => setIsImageVisible(false);

  useEffect(() => {
    const fetchCategories = async () => {
      try {
        const data = await getAllCategories();
        const mainCats = data
          .filter((c) => !c.parentCategoryId)
          .map((c) => ({
            value: c.categoryId,
            label: c.categoryName,
          }));
        setCategories(mainCats);
      } catch (error) {
        console.error("‚ùå L·ªói t·∫£i danh m·ª•c:", error);
      }
    };
    fetchCategories();
  }, []);

  useEffect(() => {
    const fetchSubCategories = async () => {
      try {
        const data = await getAllCategories();
        const subs = data
          .filter((c) => c.parentCategoryId === selectedCategory?.value)
          .map((c) => ({
            value: c.categoryId,
            label: c.categoryName,
          }));
        setSubCategories(subs);
      } catch (error) {
        console.error("‚ùå L·ªói t·∫£i danh m·ª•c con:", error);
      }
    };

    if (selectedCategory) {
      fetchSubCategories();
    } else {
      setSubCategories([]);
    }
  }, [selectedCategory]);

  // üß© Validate d·ªØ li·ªáu
  const validateForm = () => {
    const newErrors = {};

    if (!product.productCode.trim()) {
      newErrors.productCode = "Vui l√≤ng nh·∫≠p m√£ s·∫£n ph·∫©m.";
    } else if (product.productCode.length < 3) {
      newErrors.productCode = "M√£ s·∫£n ph·∫©m ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±.";
    } else if (product.productCode.length > 50) {
      newErrors.productCode = "M√£ s·∫£n ph·∫©m kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 50 k√Ω t·ª±.";
    }

    if (!product.productName.trim()) {
      newErrors.productName = "Vui l√≤ng nh·∫≠p t√™n s·∫£n ph·∫©m.";
    } else if (product.productName.length < 3) {
      newErrors.productName = "T√™n s·∫£n ph·∫©m ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±.";
    } else if (product.productName.length > 100) {
      newErrors.productName = "T√™n s·∫£n ph·∫©m kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 100 k√Ω t·ª±.";
    }

    if (!selectedCategory) {
      newErrors.category = "Vui l√≤ng ch·ªçn danh m·ª•c ch√≠nh.";
    }

    if (!selectedSubCategory) {
      newErrors.subCategory = "Vui l√≤ng ch·ªçn danh m·ª•c con.";
    }

    if (!product.supplierName.trim()) {
      newErrors.supplierName = "Vui l√≤ng nh·∫≠p t√™n nh√† cung c·∫•p.";
    }

    if (product.unit && product.unit.length > 50) {
      newErrors.unit = "ƒê∆°n v·ªã kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 50 k√Ω t·ª±.";
    }

    if (product.dimensions && product.dimensions.length > 100) {
      newErrors.dimensions = "K√≠ch th∆∞·ªõc kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 100 k√Ω t·ª±.";
    }

    if (product.description && product.description.length > 500) {
      newErrors.description = "M√¥ t·∫£ kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 500 k√Ω t·ª±.";
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!validateForm()) {
      message.warning("Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin nh·∫≠p.");
      return;
    }

    const productData = {
      productCode: product.productCode.trim(),
      productName: product.productName.trim(),
      description: product.description.trim(),
      unit: product.unit.trim(),
      dimensions: product.dimensions.trim(),
      categoryId: selectedSubCategory
        ? selectedSubCategory.value
        : selectedCategory?.value,
      supplierName: product.supplierName.trim(),
      active: true,
      imageUrl: "",
    };

    try {
      setIsSubmitting(true);
      const created = await createProduct(productData);
      message.success(`S·∫£n ph·∫©m "${created.productName}" t·∫°o th√†nh c√¥ng!`);
      navigate(route.products);
    } catch (error) {
      console.error("‚ùå L·ªói t·∫°o s·∫£n ph·∫©m:", error);
      const res = error.response?.data;

      if (res?.code === 4000 && res?.message) {
        const messages = res.message
          .split(";")
          .map((msg) => msg.trim())
          .filter(Boolean);
        messages.forEach((msg) => message.error(msg));
      } else if (res?.message) {
        message.error(res.message);
      } else {
        message.error("L·ªói t·∫°o s·∫£n ph·∫©m. Vui l√≤ng th·ª≠ l·∫°i.");
      }
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <>
      <div className="page-wrapper">
        <div className="content">
          <div className="page-header">
            <div className="add-item d-flex">
              <div className="page-title">
                <h4>T·∫°o s·∫£n ph·∫©m</h4>
                <h6>T·∫°o s·∫£n ph·∫©m m·ªõi</h6>
              </div>
            </div>
            <ul className="table-top-head">
              <RefreshIcon />
              <CollapesIcon />
              <li>
                <div className="page-btn">
                  <Link to={route.products} className="btn btn-secondary">
                    <i className="feather icon-arrow-left me-2" />
                    Tr·ªü v·ªÅ danh s√°ch s·∫£n ph·∫©m
                  </Link>
                </div>
              </li>
            </ul>
          </div>

          <form className="add-product-form" onSubmit={handleSubmit}>
            <div className="add-product">
              {/* --- TH√îNG TIN S·∫¢N PH·∫®M --- */}
              <div className="accordion-item border mb-4">
                <h2 className="accordion-header" id="headingSpacingOne">
                  <div
                    className="accordion-button bg-white"
                    data-bs-toggle="collapse"
                    data-bs-target="#SpacingOne"
                    aria-expanded="true"
                    aria-controls="SpacingOne"
                  >
                    <div className="d-flex align-items-center justify-content-between flex-fill">
                      <h5 className="d-flex align-items-center">
                        <i className="feather icon-info text-primary me-2" />
                        <span>Th√¥ng tin s·∫£n ph·∫©m</span>
                      </h5>
                    </div>
                  </div>
                </h2>

                <div
                  id="SpacingOne"
                  className="accordion-collapse collapse show"
                >
                  <div className="accordion-body border-top">
                    <div className="row">
                      <div className="col-sm-6">
                        <div className="mb-3">
                          <label className="form-label">
                            M√£ s·∫£n ph·∫©m<span className="text-danger">*</span>
                          </label>
                          <input
                            type="text"
                            className={`form-control ${
                              errors.productCode ? "is-invalid" : ""
                            }`}
                            value={product.productCode}
                            onChange={(e) =>
                              setProduct({
                                ...product,
                                productCode: e.target.value,
                              })
                            }
                          />
                          {errors.productCode && (
                            <div className="invalid-feedback">
                              {errors.productCode}
                            </div>
                          )}
                        </div>
                      </div>

                      <div className="col-sm-6">
                        <div className="mb-3">
                          <label className="form-label">
                            T√™n s·∫£n ph·∫©m<span className="text-danger">*</span>
                          </label>
                          <input
                            type="text"
                            className={`form-control ${
                              errors.productName ? "is-invalid" : ""
                            }`}
                            value={product.productName}
                            onChange={(e) =>
                              setProduct({
                                ...product,
                                productName: e.target.value,
                              })
                            }
                          />
                          {errors.productName && (
                            <div className="invalid-feedback">
                              {errors.productName}
                            </div>
                          )}
                        </div>
                      </div>
                    </div>

                    {/* --- DANH M·ª§C --- */}
                    <div className="row">
                      <div className="col-sm-6">
                        <div className="mb-3">
                          <label className="form-label">
                            Danh m·ª•c<span className="text-danger">*</span>
                          </label>
                          <CommonSelect
                            className={`w-100 ${
                              errors.category ? "is-invalid" : ""
                            }`}
                            options={categories}
                            value={selectedCategory}
                            onChange={(opt) => {
                              setSelectedCategory(opt);
                              setSelectedSubCategory(null);
                              setErrors((prev) => ({
                                ...prev,
                                category: "",
                              }));
                            }}
                            placeholder="Ch·ªçn danh m·ª•c"
                          />
                          {errors.category && (
                            <div className="text-danger small mt-1">
                              {errors.category}
                            </div>
                          )}
                        </div>
                      </div>

                      <div className="col-sm-6">
                        <div className="mb-3">
                          <label className="form-label">
                            Danh m·ª•c con<span className="text-danger">*</span>
                          </label>
                          <CommonSelect
                            className={`w-100 ${
                              errors.subCategory ? "is-invalid" : ""
                            }`}
                            options={subCategories}
                            value={selectedSubCategory}
                            onChange={(opt) => {
                              setSelectedSubCategory(opt);
                              setErrors((prev) => ({
                                ...prev,
                                subCategory: "",
                              }));
                            }}
                            placeholder="Ch·ªçn danh m·ª•c con"
                          />
                          {errors.subCategory && (
                            <div className="text-danger small mt-1">
                              {errors.subCategory}
                            </div>
                          )}
                        </div>
                      </div>
                    </div>

                    {/* --- ƒê∆†N V·ªä, NCC --- */}
                    <div className="row">
                      <div className="col-sm-6">
                        <div className="mb-3">
                          <label className="form-label">ƒê∆°n v·ªã</label>
                          <input
                            type="text"
                            className={`form-control ${
                              errors.unit ? "is-invalid" : ""
                            }`}
                            value={product.unit}
                            onChange={(e) =>
                              setProduct({ ...product, unit: e.target.value })
                            }
                          />
                          {errors.unit && (
                            <div className="invalid-feedback">
                              {errors.unit}
                            </div>
                          )}
                        </div>
                      </div>

                      <div className="col-sm-6">
                        <div className="mb-3">
                          <label className="form-label">
                            Nh√† cung c·∫•p<span className="text-danger">*</span>
                          </label>
                          <input
                            type="text"
                            className={`form-control ${
                              errors.supplierName ? "is-invalid" : ""
                            }`}
                            value={product.supplierName}
                            onChange={(e) =>
                              setProduct({
                                ...product,
                                supplierName: e.target.value,
                              })
                            }
                          />
                          {errors.supplierName && (
                            <div className="invalid-feedback">
                              {errors.supplierName}
                            </div>
                          )}
                        </div>
                      </div>
                    </div>

                    {/* --- K√çCH TH∆Ø·ªöC --- */}
                    <div className="row">
                      <div className="col-sm-6">
                        <div className="mb-3">
                          <label className="form-label">K√≠ch th∆∞·ªõc</label>
                          <input
                            type="text"
                            className={`form-control ${
                              errors.dimensions ? "is-invalid" : ""
                            }`}
                            value={product.dimensions}
                            onChange={(e) =>
                              setProduct({
                                ...product,
                                dimensions: e.target.value,
                              })
                            }
                          />
                          {errors.dimensions && (
                            <div className="invalid-feedback">
                              {errors.dimensions}
                            </div>
                          )}
                        </div>
                      </div>
                    </div>

                    {/* --- M√î T·∫¢ --- */}
                    <div className="col-lg-12">
                      <div className="summer-description-box">
                        <label className="form-label">M√¥ t·∫£</label>
                        <textarea
                          className={`form-control ${
                            errors.description ? "is-invalid" : ""
                          }`}
                          rows={5}
                          value={product.description}
                          onChange={(e) =>
                            setProduct({
                              ...product,
                              description: e.target.value,
                            })
                          }
                        />
                        {errors.description && (
                          <div className="invalid-feedback">
                            {errors.description}
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              {/* --- H√åNH ·∫¢NH --- */}
              <div className="accordion-item border mb-4">
                <h2 className="accordion-header" id="headingSpacingThree">
                  <div
                    className="accordion-button collapsed bg-white"
                    data-bs-toggle="collapse"
                    data-bs-target="#SpacingThree"
                    aria-expanded="true"
                    aria-controls="SpacingThree"
                  >
                    <div className="d-flex align-items-center justify-content-between flex-fill">
                      <h5 className="d-flex align-items-center">
                        <i className="feather icon-image text-primary me-2" />
                        <span>·∫¢nh</span>
                      </h5>
                    </div>
                  </div>
                </h2>
                <div
                  id="SpacingThree"
                  className="accordion-collapse collapse show"
                >
                  <div className="accordion-body border-top">
                    <div className="image-upload">
                      <input type="file" />
                      <div className="image-uploads">
                        <i className="feather icon-plus-circle plus-down-add me-0" />
                        <h4>Th√™m ·∫£nh</h4>
                      </div>
                    </div>
                    {isImageVisible && (
                      <div className="phone-img mt-3">
                        <img src="" alt="product" />
                        <Link to="#">
                          <i
                            className="feather icon-x x-square-add remove-product"
                            onClick={handleRemoveProduct}
                          />
                        </Link>
                      </div>
                    )}
                  </div>
                </div>
              </div>

              {/* --- N√öT L∆ØU --- */}
              <div className="col-lg-12">
                <div className="d-flex align-items-center justify-content-end mb-4">
                  <button
                    type="button"
                    className="btn btn-secondary me-2"
                    onClick={() => navigate(route.products)}
                  >
                    Hu·ª∑
                  </button>
                  <button
                    type="submit"
                    className="btn btn-primary"
                    disabled={isSubmitting}
                  >
                    {isSubmitting ? "ƒêang l∆∞u..." : "Th√™m s·∫£n ph·∫©m"}
                  </button>
                </div>
              </div>
            </div>
          </form>
        </div>

        <div className="footer d-sm-flex align-items-center justify-content-between border-top bg-white p-3">
          <p className="mb-0 text-gray-9">2025 ¬© SnapBuy.</p>
          <p>
            Thi·∫øt k·∫ø & Ph√°t tri·ªÉn b·ªüi{" "}
            <Link to="#" className="text-primary">
              G127
            </Link>
          </p>
        </div>
      </div>

      <DeleteModal />
    </>
  );
};

export default AddProduct;
